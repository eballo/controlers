#!/bin/bash

####################################################################
# Script de copias de seguridad para servidores linux              #
#                                                                  #
# Autores : Cristina y Giorgio                                     #
#                                                                  #
# Version : 1.5                                                    #
#                                                                  #
# Desc: Copia de elementos definidos en un fichero por red         #
#     Requisitos de funcionamiento:                                #
# 	  * El host destino debe tener la clave publica del cliente    #
#     de no ser así el script no funcionará                        #
#     * El host cliente debe tener instalado el paquete links      #
#                                                                  #
#################################################################### 

#Validacion de la instalacion
SACSEXHOME="$HOME/.sacsexBckps"
if [ ! -f $SACSEXHOME/sacsex.properties ]
then
        echo "Sacsex no esta instalado para este usuario."
        exit 1
fi


#Constantes

SACSEXHOME="$HOME/.sacsexBckps"

#Variables globales###
errors=0             
numfiles=0           
numdirs=0
destDateAppend=`date +%Y%m%d%H%M%S`
errorlog="$SACSEXHOME/sacsex.err.log"
log="$SACSEXHOME/sacsex.log"

propiertiesFile="$SACSEXHOME/sacsex.properties"

#Funciones
function log(){
	#Concatenamos los datos al fichero
	echo "[  `date +"%Y/%m/%d %H-%M-%S"`   ] - $1" >>$log
	echo -e "$1" 
}

#Separador en el fichero de log
log " ##### SACSEX-BKP #####" 


#BANNER#
echo -e "\033[0;31m ################################################# \033[0m"
echo -e "\033[0;31m ####### \033[0m \033[0;33m SACSEX  1.0 \033[0m \033[0;34m BackUps por Red \033[0m \033[0;31m ####### \033[0m"
echo -e "\033[0;31m ################################################# \033[0m"
#######

if [ -f "$propiertiesFile" ]
then
	#Cargando parámetros de configuración.
	for elem in `cat $propiertiesFile`
	do
		if [ `echo $elem | grep "SACS_SVR_IP=" | wc -l` -eq 1 ]
		then
			SVR_CONN=`echo $elem | cut -d'=' -f2`
		elif [ `echo $elem | grep "SACS_USER=" | wc -l` -eq 1 ]
		then
			user=`echo $elem | cut -d'=' -f2`
		elif [ `echo $elem | grep "SACS_PASS=" | wc -l` -eq 1 ]
		then
			pwd5md=`echo $elem | cut -d'=' -f2`
		fi
	done
#
	if [ "$SVR_CONN" != '' ] && [ "$user" != '' ] && [ "$pwd5md" != '' ]
	then
		#Recojo la IP y el Puerto del servidor para probar conexion
		SVR_IP=`echo $SVR_CONN | cut -d':' -f1`
		SVR_PORT=`echo $SVR_CONN | cut -d':' -f2`
		
		echo "Comprobando conexion"
		nc -z "$SVR_IP" "$SVR_PORT" 2>/dev/null
		if [ $? -eq 0 ]
		then
			SVR_CONN=${SVR_IP}:${SVR_PORT}
			busca=`links -dump "http://$SVR_CONN/sacsex/services/service.auth.php?user=$user&pass=$pwd5md&install=false"`
			id=`echo $busca | cut -f2 -d":"`
			# Comprobamos el id devuelto
			if [ "$id" != "1" ]
			then			
				DESTDIR=`echo $busca | cut -d":" -f3-`		
				rutas=`links -dump "http://$SVR_CONN/sacsex/services/service.dirlist.php?user=$user&pass=$pwd5md"`
				rvalidas=()
				novalidas=()
				val=0
				nval=0
				for i in ${rutas}
				do 	
					if [ -d "$i" -o -f "$i" ]
					then
						let numdirs=$numdirs+1
						rvalidas[$val]=$i
						((val++))
					else
						log "Error: No se localizo el directorio $i"
						((errors++))
						novalidas[$nval]="$i"
						((nval++))
					fi
				done
				for elem in ${novalidas[*]}
				do	
					res=`links -dump "http://$SVR_CONN/sacsex/services/service.invalidpath.php?dir=$elem&user=$user&pass=$pwd5md"`
					if [ `echo $res | cut -d'/' -f2` -ne 0 ]
					then
						log "No se ha podido eliminar $elem de la base de datos y este elemento no es valido"
					else
						log "$elem eliminado de la Base de datos al no ser valido"
					fi
				done
				
				#Creamos el comprimido de las rutas especificadas 
				
				totalElem=${#rvalidas[@]}
				if [ "$totalElem" -ne 0 ]
				then
					path="${id}_${destDateAppend}.tar.gz"
					tarname="/tmp/$path"
					tar -cvzf  "$tarname" `echo ${rvalidas[*]}` --exclude "$path" >>${log} 2>>${errorlog}
					if [ "$?" -eq 0 ]
					then
						log "#  [ Comprimiendo \033[1;33m${rvalidas[*]}\033[0m ]			\033[0;32m [ OK ] \033[0m"
					else 
						log "#  [ Comprimiendo \033[1;33m${rvalidas[*]}\033[0m ]			\033[0;31m [ Error ] \033[0m"
					fi
					
					#recibo el tamaño en bytes y lo transformo a Kb
					size=`stat -c%s $tarname`
					((size=$size/1024))
					#1.- Se pide confirmacion de que el espacio maximo no haya sido superado
	 
					uok=`links -dump "http://$SVR_CONN/sacsex/services/service.uploadOk.php?user=$user&pass=$pwd5md&file=$tarname&size=$size"` #Pedimos autorizacion de subida
					ok=`echo $uok | cut -d":" -f1`
					if [ "$ok" == 0 ]
					then
						hoy=`date +'%Y-%m-%d %H:%M:%S'`
						#Si ok, se recoge el sshLogin y se hace el scp sobre la ruta de temporal
						sshLogin=`echo $uok | cut -d":" -f2-`
						chmod 660 $tarname
						scp -q "$tarname" ${sshLogin}
						copiado=$?
						# Si scp Ok, se ejecuta el service.bkpsnotify para subirlo a la BD
						if [ $copiado -eq 0 ]
						then
							log "#  [ Copiando \033[1;33m${destDateAppend}.tar.gz\033[0m ] 		\033[0;32m [ OK ] \033[0m"
							# Se mueve el tar del directorio temporal al directorio final mediante el servicio			
							res=`links -dump "http://$SVR_CONN/sacsex/services/service.bckpsnotify.php?user=$user&pass=$pwd5md&file=$path&date=$hoy&size=$size"` 
							ok=`echo $res | cut -d: -f1`
							if [ "$ok" == 'Error' ]
							then
								log "$res    \033[0;31m [ Error ] \033[0m"
							fi
						else
							log "Error al intentar subir los archivos a $DESTDIR  \033[0;31m [ Error ] \033[0m"
						fi
					else
						log "$uok   \033[0;31m [ Error ] \033[0m"
					fi
					#Por ultimo, eliminamos el tar del origen
					rm "$tarname" 2>/dev/null 
				else
					log "Ninguna ruta para hacer copia de seguridad  \033[0;31m [ Error ] \033[0m"
				fi
			else
				log "Error: Usuario '$user' no localizado en la base de datos.  \033[0;31m [ Error ] \033[0m"
			fi
		else
			log "Error: No se ha podido acceder al puerto $SVR_PORT\n del servidor $SVR_IP.\n\n Compruebe los datos y asegurese de que dicho puerto figura abierto" >> ${errorlog}
		fi
	else
		log "Error: faltan algunos parametros por completar en el archivo $propiertiesFile" >> ${errorlog}
	fi
	#
else
	log "Rutas incorrectas"
fi
